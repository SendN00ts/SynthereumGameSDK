"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/twitterClient.ts
var twitterClient_exports = {};
__export(twitterClient_exports, {
  TwitterClient: () => TwitterClient
});
module.exports = __toCommonJS(twitterClient_exports);
var import_twitter_api_v2 = __toESM(require("twitter-api-v2"));
var TwitterClient = class {
  constructor(credential) {
    this.twitterClient = new import_twitter_api_v2.default({
      appKey: credential.apiKey,
      appSecret: credential.apiSecretKey,
      accessToken: credential.accessToken,
      accessSecret: credential.accessTokenSecret
    });
  }
  get client() {
    return this.twitterClient;
  }
  post(tweet) {
    return this.twitterClient.v2.tweet(tweet);
  }
  search(query) {
    return __async(this, null, function* () {
      const response = yield this.twitterClient.v2.search(query, {
        max_results: 10,
        "tweet.fields": ["public_metrics"]
      });
      return response.data;
    });
  }
  reply(tweetId, reply) {
    return this.twitterClient.v2.reply(reply, tweetId);
  }
  like(tweetId) {
    return __async(this, null, function* () {
      const me = yield this.twitterClient.v2.me();
      return this.twitterClient.v2.like(me.data.id, tweetId);
    });
  }
  quote(tweetId, quote) {
    return this.twitterClient.v2.quote(quote, tweetId);
  }
  me() {
    return this.twitterClient.v2.me({
      "user.fields": ["public_metrics"]
    });
  }
  mentions(paginationToken) {
    return __async(this, null, function* () {
      const me = yield this.twitterClient.v2.me();
      const options = {};
      if (paginationToken) {
        options.pagination_token = paginationToken;
      }
      const response = yield this.twitterClient.v2.userMentionTimeline(
        me.data.id,
        options
      );
      return response.data;
    });
  }
  followers(paginationToken) {
    return __async(this, null, function* () {
      const me = yield this.twitterClient.v2.me();
      const options = {};
      if (paginationToken) {
        options.pagination_token = paginationToken;
      }
      const response = yield this.twitterClient.v2.followers(me.data.id, options);
      return response;
    });
  }
  following(paginationToken) {
    return __async(this, null, function* () {
      const me = yield this.twitterClient.v2.me();
      const options = {};
      if (paginationToken) {
        options.pagination_token = paginationToken;
      }
      const response = yield this.twitterClient.v2.following(me.data.id, options);
      return response;
    });
  }
  uploadMedia(media) {
    return __async(this, null, function* () {
      const mediaBuffer = Buffer.from(yield media.arrayBuffer());
      const response = yield this.twitterClient.v2.uploadMedia(mediaBuffer, {
        media_type: media.type
      });
      return response;
    });
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  TwitterClient
});
